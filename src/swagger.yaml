openapi: 3.0.3
info:
  title: Swagger iSee-API - OpenAPI 3.0
  version: 1.0.0
servers:
  - url: https://localhost:3000
tags:
  - name: User
    description: User management
  - name: Videos
    description: Video management
  - name: Comments
    description: Comments of a video
paths:
  /comments:
    get:
      tags:
        - Comments
      summary: Get all comments (Admin)
      operationId: getAllComments
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDetails'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Comments
      summary: Create a comment (Register)
      operationId: createComment
      parameters:
        - in: query
          name: videoId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDetails'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /comments/{videoId}:
    get:
      tags:
        - Comments
      summary: Get all comments for a video
      operationId: getCommentsByVideoId
      parameters:
        - name: videoId
          in: path
          description: Video ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDetails'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /comments/{id}:
    delete:
      tags:
        - Comments
      summary: Delete a comment by ID (Admin or comment owner)
      operationId: deleteCommentById
      parameters:
        - name: id
          in: path
          description: Comment ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Comment deleted succesfully
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /users:
    get:
      tags:
        - User
      summary: Get all users (Admin)
      operationId: getAllUsers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetailsPagination'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - User
      summary: Create a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '406':
          $ref: '#/components/responses/406'
        '500':
          $ref: '#/components/responses/500'
  /users/login:
    post:
      tags:
        - User
      summary: User login
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '201':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginDetails'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
  /users/logout:
    post:
      tags:
        - User
      summary: User logout (Register)
      operationId: logoutUser
      responses:
        '201':
          description: Successful logout
  /users/verify:
    get:
      tags:
        - User
      summary: Verify user email
      operationId: verifyEmail
      responses:
        '200':
          description: Mail verified successfully
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  /users/profile:
    get:
      tags:
        - User
      summary: Get user profile
      operationId: getUserProfile
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          $ref: '#/components/responses/404'
  /users/{username}:
    get:
      tags:
        - User
      summary: Get user by username (Admin)
      operationId: getUserByUsername
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
        - User
      summary: Update user by username (Admin or current user)
      operationId: updateUserByUsername
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - User
      summary: Delete user by username (Admin or current user)
      operationId: deleteUserByUsername
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /videos:
    get:
      tags:
        - Videos
      summary: Get all videos or search video by title
      operationId: getAllVideos
      parameters:
        - in: query
          name: search
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoDetailsPagination'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Videos
      summary: Create a new video (Register)
      operationId: createVideo
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoDetails'
        '406':
          $ref: '#/components/responses/406'
        '500':
          $ref: '#/components/responses/500'
  /videos/{id}:
    get:
      tags:
        - Videos
      summary: Get a video by ID
      operationId: getVideoByI
      parameters:
        - name: id
          in: path
          description: Video ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoDetails'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Videos
      summary: Update a video by ID (Admin or video owner)
      operationId: updateVideoById
      parameters:
        - name: id
          in: path
          description: Video ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideoRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoDetails'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - Videos
      summary: Delete a video by ID (Admin or video owner)
      operationId: deleteVideoById
      parameters:
        - name: id
          in: path
          description: Video ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Video deleted successfully
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /videos/{id}/watch:
    patch:
      tags:
        - Videos
      summary: Watch a video
      operationId: watchVideo
      parameters:
        - name: id
          in: path
          description: Video ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoDetails'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /videos/{id}/hide:
    patch:
      tags:
        - Videos
      summary: Hide or unhide a video (Admin or video owner)
      operationId: hideVideo
      parameters:
        - name: id
          in: path
          description: Video ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoDetails'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /videos/{id}/block:
    patch:
      tags:
        - Videos
      summary: Block or unblock a video (Admin)
      operationId: blockVideo
      parameters:
        - name: id
          in: path
          description: Video ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoDetails'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  schemas:
    CommentRequest:
      title: CommentRequest
      type: object
      properties:
        contenu:
          type: string
    CommentDetails:
      title: CommentDetails
      type: object
      allOf: 
        - $ref: '#/components/schemas/IdEntity'
        - $ref: '#/components/schemas/CommentRequest'
      properties:
        id_video:
          type: string
          format: uuid
        username:
          type: string
        date:
          type: string
          format: date-time
    UserRequest:
      title: UserRequest
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
    UserDetails:
      title: UserDetails
      type: object
      allOf: 
        - $ref: '#/components/schemas/IdEntity'
        - $ref: '#/components/schemas/UserRequest'
      properties:
        profilePicture:
          type: string
        isAdmin:
          type: boolean
        verified:
          type: boolean
        videos:
          type: array
          items:
            $ref: '#/components/schemas/VideoDetails'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDetails'
    UserArray:
      title: UserArray
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDetails'
    UserDetailsPagination:
      title: UserDetailsPagination
      type: object
      allOf: 
        - $ref: '#/components/schemas/UserArray'
        - $ref: '#/components/schemas/Pagination'
    Pagination:
      title: Pagination
      type: object
      properties:
        currentPage:
          type: string
        totalPages:
          type: string
    VideoRequest:
      title: VideoRequest
      type: object
      properties:
        title:
          type: string
        description:
          type: string
    VideoDetails:
      title: VideoDetails
      type: object
      allOf: 
        - $ref: '#/components/schemas/IdEntity'
        - $ref: '#/components/schemas/VideoRequest'
      properties:
        file_name:
          type: string
        username:
          type: string
        hidden:
          type: boolean
        blocked:
          type: boolean
        uploadDate:
          type: string
          format: date-time
        views:
          type: integer
        comments:
          type: array
          items: 
            $ref: '#/components/schemas/CommentDetails'
    VideoArray:
      title: VideoArray
      type: object
      properties:
        videos:
          type: array
          items:
            $ref: '#/components/schemas/VideoDetails'
    VideoDetailsPagination:
      title: VideoDetailsPagination
      type: object
      allOf: 
        - $ref: '#/components/schemas/VideoArray'
        - $ref: '#/components/schemas/Pagination'
    LoginRequest:
      title: LoginRequest
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginDetails:
      title: LoginDetails
      type: object
      properties:
        username:
          type: string
        isAdmin:
          type: boolean
    ErrorModel:
      title: ErrorModel
      description: Error model following RFC7807
      type: object
      properties:
        title:
          type: string
          description: Error title
        detail:
          type: string
          description: Error detail
    IdEntity:
      title: id
      type: object
      properties:
        _id:
          type: string
          format: uuid
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    '404':
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    '406':
      description: Not acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'